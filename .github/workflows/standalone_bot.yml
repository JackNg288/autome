name: Standalone Integrated Bot

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: "0 */6 * * *"  # Run every 6 hours

jobs:
  run-standalone-bot:
    name: Run Standalone Bot with Analyzer
    runs-on: ubuntu-latest
    timeout-minutes: 350  # Just under 6 hours
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas numpy python-dotenv
          echo "‚úÖ Dependencies installed"

      - name: Create symbols file if not exists
        run: |
          if [ ! -f symbols.txt ]; then
            echo "Creating default symbols.txt..."
            cat > symbols.txt << EOF
          BTCUSDT
          ETHUSDT
          SOLUSDT
          XRPUSDT
          ADAUSDT
          BNBUSDT
          DOGEUSDT
          MATICUSDT
          EOF
            echo "‚úÖ Created symbols.txt"
          else
            echo "‚úÖ symbols.txt already exists"
          fi

      - name: Run Standalone Bot
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "üöÄ Starting Standalone Integrated Bot..."
          echo "üìä This bot includes built-in signal analysis"
          echo "‚è± Will run for approximately 5 hours 50 minutes"
          
          # Run the standalone bot with timeout
          timeout 21000 python standalone_integrated_bot.py || EXIT_CODE=$?
          
          # Check exit code
          if [ "${EXIT_CODE:-0}" -eq 124 ]; then
            echo "‚úÖ Bot completed successfully (timeout reached)"
          elif [ "${EXIT_CODE:-0}" -eq 0 ]; then
            echo "‚úÖ Bot completed successfully"
          else
            echo "‚ö†Ô∏è Bot exited with code: ${EXIT_CODE:-0}"
          fi

      - name: Generate Performance Summary
        if: always()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "üìä Generating performance summary..."
          
          python << 'EOF'
          import sqlite3
          import os
          import requests
          from datetime import datetime
          
          # Check if database exists
          if os.path.exists('signals_database.db'):
              conn = sqlite3.connect('signals_database.db')
              cursor = conn.cursor()
              
              # Get statistics
              cursor.execute('SELECT COUNT(*) FROM signals')
              total = cursor.fetchone()[0]
              
              cursor.execute('SELECT COUNT(*) FROM signals WHERE status = "ACTIVE"')
              active = cursor.fetchone()[0]
              
              cursor.execute('SELECT COUNT(*) FROM signals WHERE status = "WIN"')
              wins = cursor.fetchone()[0]
              
              cursor.execute('SELECT COUNT(*) FROM signals WHERE status = "LOSS"')
              losses = cursor.fetchone()[0]
              
              # Calculate win rate
              win_rate = (wins / (wins + losses) * 100) if (wins + losses) > 0 else 0
              
              # Get recent signals
              cursor.execute('''
                  SELECT symbol, direction, entry_price, status, pnl_percent
                  FROM signals
                  ORDER BY timestamp DESC
                  LIMIT 5
              ''')
              recent_signals = cursor.fetchall()
              
              conn.close()
              
              # Create summary
              summary = f"""üìä Performance Summary - {datetime.now().strftime('%Y-%m-%d %H:%M')}
              
          Total Signals: {total}
          Active: {active}
          Wins: {wins}
          Losses: {losses}
          Win Rate: {win_rate:.1f}%
          
          Recent Signals:"""
              
              for sig in recent_signals:
                  symbol, direction, entry, status, pnl = sig
                  pnl_str = f"{pnl:+.2f}%" if pnl else "0.00%"
                  summary += f"\n‚Ä¢ {symbol} {direction} @ {entry:.4f} - {status} ({pnl_str})"
              
              print(summary)
              
              # Send to Telegram if credentials available
              token = os.getenv('TELEGRAM_TOKEN')
              chat_id = os.getenv('TELEGRAM_CHAT_ID')
              
              if token and chat_id:
                  url = f"https://api.telegram.org/bot{token}/sendMessage"
                  payload = {
                      "chat_id": chat_id,
                      "text": f"*GitHub Actions Report*\n\n{summary}",
                      "parse_mode": "Markdown"
                  }
                  try:
                      requests.post(url, data=payload)
                      print("‚úÖ Summary sent to Telegram")
                  except:
                      print("‚ö†Ô∏è Failed to send Telegram message")
          else:
              print("‚ö†Ô∏è No database found - bot may not have run properly")
          EOF

      - name: Export data to CSV
        if: always()
        run: |
          python << 'EOF'
          import sqlite3
          import pandas as pd
          import os
          
          if os.path.exists('signals_database.db'):
              conn = sqlite3.connect('signals_database.db')
              
              # Export all signals
              df = pd.read_sql_query("SELECT * FROM signals ORDER BY timestamp DESC", conn)
              
              if len(df) > 0:
                  df.to_csv('signals_export.csv', index=False)
                  print(f"‚úÖ Exported {len(df)} signals to signals_export.csv")
                  
                  # Create summary statistics
                  stats = {
                      'Total Signals': len(df),
                      'Active': len(df[df['status'] == 'ACTIVE']),
                      'Wins': len(df[df['status'] == 'WIN']),
                      'Losses': len(df[df['status'] == 'LOSS']),
                      'Symbols Traded': df['symbol'].nunique(),
                      'Avg PnL %': df['pnl_percent'].mean() if 'pnl_percent' in df else 0
                  }
                  
                  pd.DataFrame([stats]).to_csv('summary_stats.csv', index=False)
                  print("‚úÖ Created summary statistics")
              else:
                  print("‚ö†Ô∏è No signals to export")
                  
              conn.close()
          else:
              print("‚ö†Ô∏è No database found")
          EOF

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: standalone-bot-data-${{ github.run_number }}
          path: |
            signals_database.db
            signals_export.csv
            summary_stats.csv
            *.log
            symbols.txt
          retention-days: 30
          if-no-files-found: warn

      - name: Clean up old data
        if: always()
        run: |
          # Optional: Clean signals older than 90 days
          python << 'EOF'
          import sqlite3
          import os
          from datetime import datetime, timedelta
          
          if os.path.exists('signals_database.db'):
              conn = sqlite3.connect('signals_database.db')
              cursor = conn.cursor()
              
              # Delete old signals
              cutoff = datetime.now() - timedelta(days=90)
              cursor.execute('DELETE FROM signals WHERE timestamp < ? AND status != "ACTIVE"', (cutoff,))
              deleted = cursor.rowcount
              
              conn.commit()
              conn.close()
              
              if deleted > 0:
                  print(f"‚úÖ Cleaned up {deleted} old signals")
              else:
                  print("‚úÖ No old signals to clean")
          EOF

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: run-standalone-bot
    if: always()
    
    steps:
      - name: Check workflow status
        run: |
          echo "üè• Health Check Results:"
          echo "Workflow: ${{ needs.run-standalone-bot.result }}"
          
          if [ "${{ needs.run-standalone-bot.result }}" == "success" ]; then
            echo "‚úÖ Bot ran successfully"
          elif [ "${{ needs.run-standalone-bot.result }}" == "failure" ]; then
            echo "‚ùå Bot failed - check logs"
          else
            echo "‚ö†Ô∏è Bot status: ${{ needs.run-standalone-bot.result }}"
          fi
