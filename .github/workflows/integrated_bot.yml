name: Integrated Bot + Analyzer System

on:
  workflow_dispatch:  # Manual trigger

jobs:
  run-integrated-system:
    name: Run Integrated Bot + Analyzer
    runs-on: ubuntu-latest
    timeout-minutes: 350  # Just under 6 hours
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas numpy python-dotenv
          echo "âœ… Dependencies installed"

      - name: Initialize Database
        run: |
          python -c "
          from signal_analyzer import SignalAnalyzer
          analyzer = SignalAnalyzer()
          print('âœ… Database initialized')
          "

      - name: Run Integrated System
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "ðŸš€ Starting Integrated Bot + Analyzer System..."
          # Run for 5 hours 50 minutes
          timeout 21000 python integrated_system.py || true

      - name: Generate Final Report
        if: always()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python -c "
          from signal_analyzer import SignalAnalyzer
          analyzer = SignalAnalyzer()
          
          # Generate comprehensive report
          report = analyzer.generate_performance_report(1)
          analyzer.send_telegram_alert(report)
          
          # Export signals
          export_result = analyzer.export_signals_csv()
          print(export_result)
          "

      - name: Upload Database and Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bot-analysis-data-${{ github.run_number }}
          path: |
            signals_database.db
            signals_export.csv
            integrated_system.log
            signal_analyzer.log
          retention-days: 30

      - name: Check System Health
        if: always()
        run: |
          python -c "
          import sqlite3
          conn = sqlite3.connect('signals_database.db')
          cursor = conn.cursor()
          
          # Get statistics
          cursor.execute('SELECT COUNT(*) FROM signals')
          total = cursor.fetchone()[0]
          
          cursor.execute('SELECT COUNT(*) FROM signals WHERE status = \"ACTIVE\"')
          active = cursor.fetchone()[0]
          
          cursor.execute('SELECT COUNT(*) FROM signals WHERE status = \"WIN\"')
          wins = cursor.fetchone()[0]
          
          cursor.execute('SELECT COUNT(*) FROM signals WHERE status = \"LOSS\"')
          losses = cursor.fetchone()[0]
          
          conn.close()
          
          print(f'ðŸ“Š System Statistics:')
          print(f'Total Signals: {total}')
          print(f'Active: {active}')
          print(f'Wins: {wins}')
          print(f'Losses: {losses}')
          
          if total > 0:
              win_rate = (wins / (wins + losses) * 100) if (wins + losses) > 0 else 0
              print(f'Win Rate: {win_rate:.2f}%')
          "

  cleanup-old-signals:
    name: Cleanup Old Signals
    runs-on: ubuntu-latest
    needs: run-integrated-system
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Database
        uses: actions/download-artifact@v4
        with:
          name: bot-analysis-data-${{ github.run_number }}

      - name: Cleanup Old Signals
        run: |
          python -c "
          import sqlite3
          from datetime import datetime, timedelta
          
          conn = sqlite3.connect('signals_database.db')
          cursor = conn.cursor()
          
          # Delete signals older than 90 days
          cutoff = datetime.now() - timedelta(days=90)
          cursor.execute('DELETE FROM signals WHERE timestamp < ?', (cutoff,))
          deleted = cursor.rowcount
          
          conn.commit()
          conn.close()
          
          print(f'âœ… Cleaned up {deleted} old signals')
          "

      - name: Upload Cleaned Database
        uses: actions/upload-artifact@v4
        with:
          name: cleaned-database-${{ github.run_number }}
          path: signals_database.db
          retention-days: 90
